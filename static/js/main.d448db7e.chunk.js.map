{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","fetchStatus","jsonData","JSON","stringify","params","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","body","headers","fetch","then","response","status","json","jsonR","detail","window","location","href","catch","error","console","log","ActionBtn","props","tweet","action","didPerformAction","likes","className","handleActionBackendEvent","display","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","endopint","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetInit","unshift","updateFinalTweets","map","item","index","key","TweetsCreate","textAreaRef","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetsDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","tweetsEl","React","createElement","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d448db7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\nexport function backendLookup(method, endpoint, callback, data){\n    let fetchStatus;\n    let jsonData;\n    if(data){\n        jsonData = JSON.stringify(data)\n    }\n    const csrftoken = getCookie('csrftoken');\n\n    let params;\n    if(csrftoken){\n        params = {\n            method: method, \n            body: jsonData,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": csrftoken,\n            }\n        }\n    } else{\n        params = {\n            method: method,\n        }\n    }\n\n    fetch('http://localhost:8000/api' + endpoint, params)\n    .then((response) => {\n        fetchStatus = response.status\n        return response.json()\n    })\n    .then((jsonR) => {\n        //console.log(jsonR)\n        if(fetchStatus === 403){\n            const detail = jsonR.detail\n            if(detail === \"Authentication credentials were not provided.\"){\n                window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(jsonR, fetchStatus)\n    })\n    .catch(function(error) {\n        console.log(\"error\", error)\n        callback({\"message\": \"The request was an error\"}, 400)\n    })\n}\n\n/*\nexport function backendLookup(method, endpoint, callback, data){\n    let jsonData;\n    if(data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = 'http://localhost:8000/api' + endpoint\n    xhr.responseType = 'json'\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    if(csrftoken){\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken) // JWT token\n    }\n    xhr.onload = function(){\n        if(xhr.status === 403){\n            const detail = xhr.response.detail\n            if(detail === \"Authentication credentials were not provided.\"){\n                window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(\"error\", e)\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send(jsonData)\n}\n*/","import React from \"react\";\nimport {apiTweetAction} from './lookup'\n\nexport function ActionBtn(props){\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes: 0\n    const className = props.className ? props.className: 'btn btn-primary btn-sm'\n    \n    const handleActionBackendEvent = (response, status) => {\n        console.log(response, status)\n        if((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response, status)\n        }\n    }\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n    }\n    const display = action.type === 'like' ? `${likes} ${action.display}` : action.display\n    return <button className={className} onClick={handleClick}>{display}</button>\n}","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n}\n\nexport function apiTweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback){\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetList(username, callback){\n    let endopint = \"/tweets/\"\n    if(username){\n        endopint = `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endopint, callback)\n}","import React, { useState } from \"react\";\nimport {ActionBtn} from './buttons'\n\nexport function ParentTweet(props){\n    const {tweet} = props\n    return tweet.parent ? <div className='row'>\n            <div className={'col-11 mx-auto p-3 border rounded'}>\n                <p className='mb-0 text-muted small'>Retweet</p>\n                <Tweet hideActions className={' '} tweet={tweet.parent} />\n            </div>\n        </div> : null\n    \n}\n\nexport function Tweet(props){\n    const {tweet, didRetweet, hideActions} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className: 'col-10 mx-auto col-md-6'\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urlTweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet, status) => {\n        if(status === 200){\n            setActionTweet(newActionTweet)\n        }else if (status === 201){\n            if(didRetweet){\n                didRetweet(newActionTweet)\n            }\n        }\n        \n    }\n    return (\n        <div className={className}>\n            <div>\n                <p>{tweet.id} - {tweet.content}</p>\n                <ParentTweet tweet={tweet} />\n            </div>\n            <div className=\"btn btn-group\">\n            { (actionTweet && hideActions !== true) && <React.Fragment>\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display: \"Likes\"}} />\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display: \"Unike\"}} />\n                    <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display: \"Retweet\"}} />\n                </React.Fragment>\n            }\n                {isDetail === true ? null : <button className=\"btn btn-outline-primary btn-sm\" onClick={handleLink}>View</button>}\n            </div> \n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport {apiTweetList} from './lookup'\nimport {Tweet} from './detail'\n\n\nexport function TweetList(props){\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    //setTweetsInit(...props.newTweets.concat(tweetsInit))\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if(final.length !== tweets.length){\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {  \n        if(tweetsDidSet === false){\n            const handleTweetListLookup = (response, status) => {\n                //console.log(response, status)\n                if(status === 200) {\n                    setTweetsInit(response)\n                    setTweetsDidSet(true)\n                }\n                else{\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    // Maybe the error is here!\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetInit = [...tweetsInit]\n        updateTweetInit.unshift(newTweet)\n        setTweetsInit(updateTweetInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    return tweets.map((item, index) => {\n            return <Tweet key={index} didRetweet={handleDidRetweet} tweet={item} className='container'/>\n        })\n}","import React, {createRef } from \"react\";\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetsCreate(props){\n    const textAreaRef = createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) => {\n        if(status === 201){\n            didTweet(response)\n        } else{\n            console.log(response)\n            alert(\"An error ocurred, please try again\")\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value  \n        // Backend api request \n        if(newVal.length <= 200){\n            apiTweetCreate(newVal, handleBackendUpdate)\n        } else{\n            alert(\"Too long\")\n        }\n        \n        textAreaRef.current.value = ''\n    }\n\n    return(\n        <div className={props.className}>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport {TweetList} from './list'\nimport {TweetsCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsComponent(props){\n    const [newTweets, setNewTweets] = useState([])\n\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) => {\n        // Backend api response handler\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift(newTweet)\n        setNewTweets(tempNewTweets)\n    }\n\n    return(\n        <div className={props.className}>\n            {canTweet === true && <TweetsCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n            <TweetList newTweets={newTweets} {...props}/> \n        </div>\n    )\n    //{...props} pass in all the props that the component has itself\n}\n\nexport function TweetsDetailComponent(props){\n    const {tweetId} = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if(status === 200){\n            setTweet(response)\n        }else{\n            alert(\"There was an error finding your tweet.\")\n        }\n    }\n    useEffect(() => {\n        if(didLookup === false){\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup])\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetsDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('tweetme')\nif(tweetsEl){\n  ReactDOM.render(React.createElement(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(React.createElement(TweetsDetailComponent, container.dataset), container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}